syntax = "proto3";
package protos;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/vipulvpatil/airetreat-go/protos";

message CreateGameRequest {
  string playerId = 1;
  bool public = 2;
}

message CreateGameResponse {
  string gameId = 1;
}

message JoinGameRequest {
  string playerId = 1;
  string gameId = 2;
}

message JoinGameResponse {}

message AutoJoinGameRequest {
  string playerId = 1;
}

message AutoJoinGameResponse {
  string gameId = 1;
}

message SendMessageRequest {
  string gameId = 1;
  string playerId = 2;
  string botId = 3;
  string text = 4;
  string type = 5;
}

message SendMessageResponse {}

message TagRequest {
  string gameId = 1;
  string playerId = 2;
  string botId = 3;
}

message TagResponse {}

message HelpRequest {
  string gameId = 1;
  string playerId = 2;
}

message HelpResponse {
  string text = 1;
}

message GetGameForPlayerRequest {
  string gameId = 1;
  string playerId = 2;
}

message GetGameForPlayerResponse {
  string state = 1;
	string displayMessage = 2;
	google.protobuf.Timestamp stateStartedAt = 3;
	int64 stateTotalTime = 4;
	string lastQuestion = 5;
	string myBotId = 7;
	repeated Bot bots = 8;
  repeated GameMessage messages = 9;
  string winningBotId = 10;
  int64 myHelpCount = 11;
  string turnBotName = 12;
}

message Bot {
  string id = 1;
  string name = 2;
}

message GameMessage {
  string sourceBotId = 1;
  string targetBotId = 2;
  string text = 3;
  string type = 4;
}

message GetGamesForPlayerRequest {
  string playerId = 1;
}

message GetGamesForPlayerResponse {
  repeated string gameIds = 1;
}

message SyncPlayerDataRequest {
  string playerId = 1;
}

message SyncPlayerDataResponse {
  string playerId = 1;
  bool connected = 2;
}

service AiRetreatGo {
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse) {}
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse) {}
  rpc AutoJoinGame(AutoJoinGameRequest) returns (AutoJoinGameResponse) {}
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
  rpc Tag(TagRequest) returns (TagResponse) {}
  rpc Help(HelpRequest) returns (HelpResponse) {}
  rpc GetGameForPlayer(GetGameForPlayerRequest) returns (GetGameForPlayerResponse) {}
  rpc GetGamesForPlayer(GetGamesForPlayerRequest) returns (GetGamesForPlayerResponse) {}
  rpc SyncPlayerData(SyncPlayerDataRequest) returns (SyncPlayerDataResponse) {}
}
